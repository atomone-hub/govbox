package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/peterbourgon/ff/v3/ffcli"
)

// @Deprecated
func propJSONCmd() *ffcli.Command {
	return &ffcli.Command{
		Name:      "propJSON",
		ShortHelp: "propJSON has been deprecated, use `govbox proposal text` instead",
		Exec: func(ctx context.Context, args []string) error {
			return flag.ErrHelp
		},
	}
}

func proposalCmd() *ffcli.Command {
	return &ffcli.Command{
		Name:      "proposal",
		ShortHelp: "Prints JSON format compatible with the `tx gov submit-proposal` command",
		Subcommands: []*ffcli.Command{
			proposalTextCmd(), proposalAmendmentCmd(),
		},
		Exec: func(ctx context.Context, args []string) error {
			return flag.ErrHelp
		},
	}
}

func proposalTextCmd() *ffcli.Command {
	fs := flag.NewFlagSet("text", flag.ContinueOnError)
	deposit := fs.String("deposit", "512000000uatone", "Proposal deposit")
	return &ffcli.Command{
		Name:       "text",
		ShortUsage: "govbox proposal text <path/to/proposal.md>",
		ShortHelp:  "Prints a text proposal for the `tx gov submit-proposal` command",
		FlagSet:    fs,
		Exec: func(ctx context.Context, args []string) error {
			if err := fs.Parse(args); err != nil {
				return err
			}
			if fs.NArg() != 1 {
				return flag.ErrHelp
			}
			bz, err := os.ReadFile(fs.Arg(0))
			if err != nil {
				return err
			}
			if len(string(bz)) > 10000 {
				return fmt.Errorf("Description has more than 10000 characters (%d)", len(string(bz)))
			}
			// Fetch title from markdown
			title := strings.SplitN(string(bz), "\n", 2)[0]
			title = title[2:] // Remove the '# ' prefix

			data := map[string]any{
				"title":    title,
				"summary":  string(bz),
				"deposit":  *deposit,
				"metadata": "ipfs://CID",
			}
			bz, err = json.MarshalIndent(data, "", "  ")
			if err != nil {
				return err
			}
			fmt.Println(string(bz))
			return nil
		},
	}
}

func proposalAmendmentCmd() *ffcli.Command {
	fs := flag.NewFlagSet("amendment", flag.ContinueOnError)
	deposit := fs.String("deposit", "512000000uatone", "Proposal deposit")
	return &ffcli.Command{
		Name:       "amendment",
		ShortUsage: "govbox proposal amendment <path/to/amendment.json>",
		ShortHelp:  "Prints a constitution amendment proposal for the `tx gov submit-proposal` command",
		LongHelp:   "The argument must be the file generated by `tx gov generate-constitution-amendment` command.",
		FlagSet:    fs,
		Exec: func(ctx context.Context, args []string) error {
			if err := fs.Parse(args); err != nil {
				return err
			}
			if fs.NArg() != 1 {
				return flag.ErrHelp
			}
			bz, err := os.ReadFile(fs.Arg(0))
			if err != nil {
				return err
			}
			msg := make(map[string]any)
			if err := json.Unmarshal(bz, &msg); err != nil {
				return err
			}
			msg["@type"] = "/atomone.gov.v1.MsgProposeConstitutionAmendment"

			data := map[string]any{
				"title":    "Constitution Amendment",
				"summary":  "# Constitution Amendment\n\nThis is a proposal to amend the constitution of Atom One.\n\nThe amendment is as follows:\n\n```diff\n" + msg["amendment"].(string) + "\n```",
				"messages": []map[string]any{msg},
				"deposit":  *deposit,
				"metadata": "ipfs://CID",
			}
			bz, err = json.MarshalIndent(data, "", "  ")
			if err != nil {
				return err
			}
			fmt.Println(string(bz))
			return nil
		},
	}
}
